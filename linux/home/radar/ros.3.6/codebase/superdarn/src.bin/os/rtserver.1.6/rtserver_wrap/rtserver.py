# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtserver', [dirname(__file__)])
        except ImportError:
            import _rtserver
            return _rtserver
        if fp is not None:
            try:
                _mod = imp.load_module('_rtserver', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtserver = swig_import_helper()
    del swig_import_helper
else:
    import _rtserver
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class OptionEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _rtserver.OptionEntry_name_set
    __swig_getmethods__["name"] = _rtserver.OptionEntry_name_get
    if _newclass:name = _swig_property(_rtserver.OptionEntry_name_get, _rtserver.OptionEntry_name_set)
    __swig_setmethods__["type"] = _rtserver.OptionEntry_type_set
    __swig_getmethods__["type"] = _rtserver.OptionEntry_type_get
    if _newclass:type = _swig_property(_rtserver.OptionEntry_type_get, _rtserver.OptionEntry_type_set)
    __swig_setmethods__["set"] = _rtserver.OptionEntry_set_set
    __swig_getmethods__["set"] = _rtserver.OptionEntry_set_get
    if _newclass:set = _swig_property(_rtserver.OptionEntry_set_get, _rtserver.OptionEntry_set_set)
    __swig_setmethods__["ptr"] = _rtserver.OptionEntry_ptr_set
    __swig_getmethods__["ptr"] = _rtserver.OptionEntry_ptr_get
    if _newclass:ptr = _swig_property(_rtserver.OptionEntry_ptr_get, _rtserver.OptionEntry_ptr_set)
    def __init__(self): 
        this = _rtserver.new_OptionEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_OptionEntry
    __del__ = lambda self : None;
OptionEntry_swigregister = _rtserver.OptionEntry_swigregister
OptionEntry_swigregister(OptionEntry)

class OptionData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _rtserver.OptionData_num_set
    __swig_getmethods__["num"] = _rtserver.OptionData_num_get
    if _newclass:num = _swig_property(_rtserver.OptionData_num_get, _rtserver.OptionData_num_set)
    __swig_setmethods__["ptr"] = _rtserver.OptionData_ptr_set
    __swig_getmethods__["ptr"] = _rtserver.OptionData_ptr_get
    if _newclass:ptr = _swig_property(_rtserver.OptionData_ptr_get, _rtserver.OptionData_ptr_set)
    def __init__(self): 
        this = _rtserver.new_OptionData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_OptionData
    __del__ = lambda self : None;
OptionData_swigregister = _rtserver.OptionData_swigregister
OptionData_swigregister(OptionData)

class OptionText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionText, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _rtserver.OptionText_num_set
    __swig_getmethods__["num"] = _rtserver.OptionText_num_get
    if _newclass:num = _swig_property(_rtserver.OptionText_num_get, _rtserver.OptionText_num_set)
    __swig_setmethods__["txt"] = _rtserver.OptionText_txt_set
    __swig_getmethods__["txt"] = _rtserver.OptionText_txt_get
    if _newclass:txt = _swig_property(_rtserver.OptionText_txt_get, _rtserver.OptionText_txt_set)
    def __init__(self): 
        this = _rtserver.new_OptionText()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_OptionText
    __del__ = lambda self : None;
OptionText_swigregister = _rtserver.OptionText_swigregister
OptionText_swigregister(OptionText)

class OptionFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["argc"] = _rtserver.OptionFile_argc_set
    __swig_getmethods__["argc"] = _rtserver.OptionFile_argc_get
    if _newclass:argc = _swig_property(_rtserver.OptionFile_argc_get, _rtserver.OptionFile_argc_set)
    __swig_setmethods__["argv"] = _rtserver.OptionFile_argv_set
    __swig_getmethods__["argv"] = _rtserver.OptionFile_argv_get
    if _newclass:argv = _swig_property(_rtserver.OptionFile_argv_get, _rtserver.OptionFile_argv_set)
    def __init__(self): 
        this = _rtserver.new_OptionFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_OptionFile
    __del__ = lambda self : None;
OptionFile_swigregister = _rtserver.OptionFile_swigregister
OptionFile_swigregister(OptionFile)


def OptionScanFileArg(*args):
  return _rtserver.OptionScanFileArg(*args)
OptionScanFileArg = _rtserver.OptionScanFileArg

def OptionProcessFile(*args):
  return _rtserver.OptionProcessFile(*args)
OptionProcessFile = _rtserver.OptionProcessFile

def OptionFreeFile(*args):
  return _rtserver.OptionFreeFile(*args)
OptionFreeFile = _rtserver.OptionFreeFile

def OptionProcess(*args):
  return _rtserver.OptionProcess(*args)
OptionProcess = _rtserver.OptionProcess

def OptionAdd(*args):
  return _rtserver.OptionAdd(*args)
OptionAdd = _rtserver.OptionAdd

def OptionDump(*args):
  return _rtserver.OptionDump(*args)
OptionDump = _rtserver.OptionDump

def OptionFree(*args):
  return _rtserver.OptionFree(*args)
OptionFree = _rtserver.OptionFree

def OptionPrintInfo(*args):
  return _rtserver.OptionPrintInfo(*args)
OptionPrintInfo = _rtserver.OptionPrintInfo
UNKNOWN_HOST = _rtserver.UNKNOWN_HOST
OPEN_FAIL = _rtserver.OPEN_FAIL
CONNECT_FAIL = _rtserver.CONNECT_FAIL
class TCPIPMsgHost(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCPIPMsgHost, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCPIPMsgHost, name)
    __repr__ = _swig_repr
    __swig_setmethods__["host"] = _rtserver.TCPIPMsgHost_host_set
    __swig_getmethods__["host"] = _rtserver.TCPIPMsgHost_host_get
    if _newclass:host = _swig_property(_rtserver.TCPIPMsgHost_host_get, _rtserver.TCPIPMsgHost_host_set)
    __swig_setmethods__["port"] = _rtserver.TCPIPMsgHost_port_set
    __swig_getmethods__["port"] = _rtserver.TCPIPMsgHost_port_get
    if _newclass:port = _swig_property(_rtserver.TCPIPMsgHost_port_get, _rtserver.TCPIPMsgHost_port_set)
    __swig_setmethods__["sock"] = _rtserver.TCPIPMsgHost_sock_set
    __swig_getmethods__["sock"] = _rtserver.TCPIPMsgHost_sock_get
    if _newclass:sock = _swig_property(_rtserver.TCPIPMsgHost_sock_get, _rtserver.TCPIPMsgHost_sock_set)
    def __init__(self): 
        this = _rtserver.new_TCPIPMsgHost()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_TCPIPMsgHost
    __del__ = lambda self : None;
TCPIPMsgHost_swigregister = _rtserver.TCPIPMsgHost_swigregister
TCPIPMsgHost_swigregister(TCPIPMsgHost)


def TCPIPMsgOpen(*args):
  return _rtserver.TCPIPMsgOpen(*args)
TCPIPMsgOpen = _rtserver.TCPIPMsgOpen

def TCPIPMsgSend(*args):
  return _rtserver.TCPIPMsgSend(*args)
TCPIPMsgSend = _rtserver.TCPIPMsgSend

def TCPIPMsgRecv(*args):
  return _rtserver.TCPIPMsgRecv(*args)
TCPIPMsgRecv = _rtserver.TCPIPMsgRecv
DATACHAR = _rtserver.DATACHAR
DATASHORT = _rtserver.DATASHORT
DATAINT = _rtserver.DATAINT
DATAFLOAT = _rtserver.DATAFLOAT
DATADOUBLE = _rtserver.DATADOUBLE
DATASTRING = _rtserver.DATASTRING
DATALONG = _rtserver.DATALONG
DATAUCHAR = _rtserver.DATAUCHAR
DATAUSHORT = _rtserver.DATAUSHORT
DATAUINT = _rtserver.DATAUINT
DATAULONG = _rtserver.DATAULONG
DATAMAP = _rtserver.DATAMAP
DATACODE = _rtserver.DATACODE
class DataMapFp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMapFp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMapFp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["zflg"] = _rtserver.DataMapFp_zflg_set
    __swig_getmethods__["zflg"] = _rtserver.DataMapFp_zflg_get
    if _newclass:zflg = _swig_property(_rtserver.DataMapFp_zflg_get, _rtserver.DataMapFp_zflg_set)
    __swig_setmethods__["sflg"] = _rtserver.DataMapFp_sflg_set
    __swig_getmethods__["sflg"] = _rtserver.DataMapFp_sflg_get
    if _newclass:sflg = _swig_property(_rtserver.DataMapFp_sflg_get, _rtserver.DataMapFp_sflg_set)
    __swig_setmethods__["size"] = _rtserver.DataMapFp_size_set
    __swig_getmethods__["size"] = _rtserver.DataMapFp_size_get
    if _newclass:size = _swig_property(_rtserver.DataMapFp_size_get, _rtserver.DataMapFp_size_set)
    __swig_getmethods__["fp"] = _rtserver.DataMapFp_fp_get
    if _newclass:fp = _swig_property(_rtserver.DataMapFp_fp_get)
    def __init__(self): 
        this = _rtserver.new_DataMapFp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_DataMapFp
    __del__ = lambda self : None;
DataMapFp_swigregister = _rtserver.DataMapFp_swigregister
DataMapFp_swigregister(DataMapFp)

class DataMapFp_fp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMapFp_fp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMapFp_fp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _rtserver.DataMapFp_fp_f_set
    __swig_getmethods__["f"] = _rtserver.DataMapFp_fp_f_get
    if _newclass:f = _swig_property(_rtserver.DataMapFp_fp_f_get, _rtserver.DataMapFp_fp_f_set)
    __swig_setmethods__["z"] = _rtserver.DataMapFp_fp_z_set
    __swig_getmethods__["z"] = _rtserver.DataMapFp_fp_z_get
    if _newclass:z = _swig_property(_rtserver.DataMapFp_fp_z_get, _rtserver.DataMapFp_fp_z_set)
    def __init__(self): 
        this = _rtserver.new_DataMapFp_fp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_DataMapFp_fp
    __del__ = lambda self : None;
DataMapFp_fp_swigregister = _rtserver.DataMapFp_fp_swigregister
DataMapFp_fp_swigregister(DataMapFp_fp)

class DataMapPointer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMapPointer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMapPointer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _rtserver.DataMapPointer_cptr_set
    __swig_getmethods__["cptr"] = _rtserver.DataMapPointer_cptr_get
    if _newclass:cptr = _swig_property(_rtserver.DataMapPointer_cptr_get, _rtserver.DataMapPointer_cptr_set)
    __swig_setmethods__["sptr"] = _rtserver.DataMapPointer_sptr_set
    __swig_getmethods__["sptr"] = _rtserver.DataMapPointer_sptr_get
    if _newclass:sptr = _swig_property(_rtserver.DataMapPointer_sptr_get, _rtserver.DataMapPointer_sptr_set)
    __swig_setmethods__["iptr"] = _rtserver.DataMapPointer_iptr_set
    __swig_getmethods__["iptr"] = _rtserver.DataMapPointer_iptr_get
    if _newclass:iptr = _swig_property(_rtserver.DataMapPointer_iptr_get, _rtserver.DataMapPointer_iptr_set)
    __swig_setmethods__["lptr"] = _rtserver.DataMapPointer_lptr_set
    __swig_getmethods__["lptr"] = _rtserver.DataMapPointer_lptr_get
    if _newclass:lptr = _swig_property(_rtserver.DataMapPointer_lptr_get, _rtserver.DataMapPointer_lptr_set)
    __swig_setmethods__["ucptr"] = _rtserver.DataMapPointer_ucptr_set
    __swig_getmethods__["ucptr"] = _rtserver.DataMapPointer_ucptr_get
    if _newclass:ucptr = _swig_property(_rtserver.DataMapPointer_ucptr_get, _rtserver.DataMapPointer_ucptr_set)
    __swig_setmethods__["usptr"] = _rtserver.DataMapPointer_usptr_set
    __swig_getmethods__["usptr"] = _rtserver.DataMapPointer_usptr_get
    if _newclass:usptr = _swig_property(_rtserver.DataMapPointer_usptr_get, _rtserver.DataMapPointer_usptr_set)
    __swig_setmethods__["uiptr"] = _rtserver.DataMapPointer_uiptr_set
    __swig_getmethods__["uiptr"] = _rtserver.DataMapPointer_uiptr_get
    if _newclass:uiptr = _swig_property(_rtserver.DataMapPointer_uiptr_get, _rtserver.DataMapPointer_uiptr_set)
    __swig_setmethods__["ulptr"] = _rtserver.DataMapPointer_ulptr_set
    __swig_getmethods__["ulptr"] = _rtserver.DataMapPointer_ulptr_get
    if _newclass:ulptr = _swig_property(_rtserver.DataMapPointer_ulptr_get, _rtserver.DataMapPointer_ulptr_set)
    __swig_setmethods__["fptr"] = _rtserver.DataMapPointer_fptr_set
    __swig_getmethods__["fptr"] = _rtserver.DataMapPointer_fptr_get
    if _newclass:fptr = _swig_property(_rtserver.DataMapPointer_fptr_get, _rtserver.DataMapPointer_fptr_set)
    __swig_setmethods__["dptr"] = _rtserver.DataMapPointer_dptr_set
    __swig_getmethods__["dptr"] = _rtserver.DataMapPointer_dptr_get
    if _newclass:dptr = _swig_property(_rtserver.DataMapPointer_dptr_get, _rtserver.DataMapPointer_dptr_set)
    __swig_setmethods__["mptr"] = _rtserver.DataMapPointer_mptr_set
    __swig_getmethods__["mptr"] = _rtserver.DataMapPointer_mptr_get
    if _newclass:mptr = _swig_property(_rtserver.DataMapPointer_mptr_get, _rtserver.DataMapPointer_mptr_set)
    __swig_setmethods__["vptr"] = _rtserver.DataMapPointer_vptr_set
    __swig_getmethods__["vptr"] = _rtserver.DataMapPointer_vptr_get
    if _newclass:vptr = _swig_property(_rtserver.DataMapPointer_vptr_get, _rtserver.DataMapPointer_vptr_set)
    def __init__(self): 
        this = _rtserver.new_DataMapPointer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_DataMapPointer
    __del__ = lambda self : None;
DataMapPointer_swigregister = _rtserver.DataMapPointer_swigregister
DataMapPointer_swigregister(DataMapPointer)

class DataMapScalar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMapScalar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMapScalar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _rtserver.DataMapScalar_name_set
    __swig_getmethods__["name"] = _rtserver.DataMapScalar_name_get
    if _newclass:name = _swig_property(_rtserver.DataMapScalar_name_get, _rtserver.DataMapScalar_name_set)
    __swig_setmethods__["type"] = _rtserver.DataMapScalar_type_set
    __swig_getmethods__["type"] = _rtserver.DataMapScalar_type_get
    if _newclass:type = _swig_property(_rtserver.DataMapScalar_type_get, _rtserver.DataMapScalar_type_set)
    __swig_setmethods__["mode"] = _rtserver.DataMapScalar_mode_set
    __swig_getmethods__["mode"] = _rtserver.DataMapScalar_mode_get
    if _newclass:mode = _swig_property(_rtserver.DataMapScalar_mode_get, _rtserver.DataMapScalar_mode_set)
    __swig_setmethods__["data"] = _rtserver.DataMapScalar_data_set
    __swig_getmethods__["data"] = _rtserver.DataMapScalar_data_get
    if _newclass:data = _swig_property(_rtserver.DataMapScalar_data_get, _rtserver.DataMapScalar_data_set)
    def __init__(self): 
        this = _rtserver.new_DataMapScalar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_DataMapScalar
    __del__ = lambda self : None;
DataMapScalar_swigregister = _rtserver.DataMapScalar_swigregister
DataMapScalar_swigregister(DataMapScalar)

class DataMapArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMapArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMapArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _rtserver.DataMapArray_name_set
    __swig_getmethods__["name"] = _rtserver.DataMapArray_name_get
    if _newclass:name = _swig_property(_rtserver.DataMapArray_name_get, _rtserver.DataMapArray_name_set)
    __swig_setmethods__["type"] = _rtserver.DataMapArray_type_set
    __swig_getmethods__["type"] = _rtserver.DataMapArray_type_get
    if _newclass:type = _swig_property(_rtserver.DataMapArray_type_get, _rtserver.DataMapArray_type_set)
    __swig_setmethods__["mode"] = _rtserver.DataMapArray_mode_set
    __swig_getmethods__["mode"] = _rtserver.DataMapArray_mode_get
    if _newclass:mode = _swig_property(_rtserver.DataMapArray_mode_get, _rtserver.DataMapArray_mode_set)
    __swig_setmethods__["dim"] = _rtserver.DataMapArray_dim_set
    __swig_getmethods__["dim"] = _rtserver.DataMapArray_dim_get
    if _newclass:dim = _swig_property(_rtserver.DataMapArray_dim_get, _rtserver.DataMapArray_dim_set)
    __swig_setmethods__["rng"] = _rtserver.DataMapArray_rng_set
    __swig_getmethods__["rng"] = _rtserver.DataMapArray_rng_get
    if _newclass:rng = _swig_property(_rtserver.DataMapArray_rng_get, _rtserver.DataMapArray_rng_set)
    __swig_setmethods__["data"] = _rtserver.DataMapArray_data_set
    __swig_getmethods__["data"] = _rtserver.DataMapArray_data_get
    if _newclass:data = _swig_property(_rtserver.DataMapArray_data_get, _rtserver.DataMapArray_data_set)
    def __init__(self): 
        this = _rtserver.new_DataMapArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_DataMapArray
    __del__ = lambda self : None;
DataMapArray_swigregister = _rtserver.DataMapArray_swigregister
DataMapArray_swigregister(DataMapArray)

class DataMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["snum"] = _rtserver.DataMap_snum_set
    __swig_getmethods__["snum"] = _rtserver.DataMap_snum_get
    if _newclass:snum = _swig_property(_rtserver.DataMap_snum_get, _rtserver.DataMap_snum_set)
    __swig_setmethods__["anum"] = _rtserver.DataMap_anum_set
    __swig_getmethods__["anum"] = _rtserver.DataMap_anum_get
    if _newclass:anum = _swig_property(_rtserver.DataMap_anum_get, _rtserver.DataMap_anum_set)
    __swig_setmethods__["scl"] = _rtserver.DataMap_scl_set
    __swig_getmethods__["scl"] = _rtserver.DataMap_scl_get
    if _newclass:scl = _swig_property(_rtserver.DataMap_scl_get, _rtserver.DataMap_scl_set)
    __swig_setmethods__["arr"] = _rtserver.DataMap_arr_set
    __swig_getmethods__["arr"] = _rtserver.DataMap_arr_get
    if _newclass:arr = _swig_property(_rtserver.DataMap_arr_get, _rtserver.DataMap_arr_set)
    def __init__(self): 
        this = _rtserver.new_DataMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_DataMap
    __del__ = lambda self : None;
DataMap_swigregister = _rtserver.DataMap_swigregister
DataMap_swigregister(DataMap)


def DataMapMake():
  return _rtserver.DataMapMake()
DataMapMake = _rtserver.DataMapMake

def DataMapMakeScalar(*args):
  return _rtserver.DataMapMakeScalar(*args)
DataMapMakeScalar = _rtserver.DataMapMakeScalar

def DataMapTestScalar(*args):
  return _rtserver.DataMapTestScalar(*args)
DataMapTestScalar = _rtserver.DataMapTestScalar

def DataMapFreeScalar(*args):
  return _rtserver.DataMapFreeScalar(*args)
DataMapFreeScalar = _rtserver.DataMapFreeScalar

def DataMapAddScalar(*args):
  return _rtserver.DataMapAddScalar(*args)
DataMapAddScalar = _rtserver.DataMapAddScalar

def DataMapStoreScalar(*args):
  return _rtserver.DataMapStoreScalar(*args)
DataMapStoreScalar = _rtserver.DataMapStoreScalar

def DataMapRemoveScalar(*args):
  return _rtserver.DataMapRemoveScalar(*args)
DataMapRemoveScalar = _rtserver.DataMapRemoveScalar

def DataMapFindScalar(*args):
  return _rtserver.DataMapFindScalar(*args)
DataMapFindScalar = _rtserver.DataMapFindScalar

def DataMapMakeArray(*args):
  return _rtserver.DataMapMakeArray(*args)
DataMapMakeArray = _rtserver.DataMapMakeArray

def DataMapTestArray(*args):
  return _rtserver.DataMapTestArray(*args)
DataMapTestArray = _rtserver.DataMapTestArray

def DataMapFreeArray(*args):
  return _rtserver.DataMapFreeArray(*args)
DataMapFreeArray = _rtserver.DataMapFreeArray

def DataMapAddArray(*args):
  return _rtserver.DataMapAddArray(*args)
DataMapAddArray = _rtserver.DataMapAddArray

def DataMapStoreArray(*args):
  return _rtserver.DataMapStoreArray(*args)
DataMapStoreArray = _rtserver.DataMapStoreArray

def DataMapRemoveArray(*args):
  return _rtserver.DataMapRemoveArray(*args)
DataMapRemoveArray = _rtserver.DataMapRemoveArray

def DataMapFindArray(*args):
  return _rtserver.DataMapFindArray(*args)
DataMapFindArray = _rtserver.DataMapFindArray

def DataMapSetFreeArray(*args):
  return _rtserver.DataMapSetFreeArray(*args)
DataMapSetFreeArray = _rtserver.DataMapSetFreeArray

def DataMapSize(*args):
  return _rtserver.DataMapSize(*args)
DataMapSize = _rtserver.DataMapSize

def DataMapEncodeBuffer(*args):
  return _rtserver.DataMapEncodeBuffer(*args)
DataMapEncodeBuffer = _rtserver.DataMapEncodeBuffer

def DataMapWrite(*args):
  return _rtserver.DataMapWrite(*args)
DataMapWrite = _rtserver.DataMapWrite

def DataMapFree(*args):
  return _rtserver.DataMapFree(*args)
DataMapFree = _rtserver.DataMapFree

def DataMapRead(*args):
  return _rtserver.DataMapRead(*args)
DataMapRead = _rtserver.DataMapRead

def DataMapFwrite(*args):
  return _rtserver.DataMapFwrite(*args)
DataMapFwrite = _rtserver.DataMapFwrite

def DataMapFread(*args):
  return _rtserver.DataMapFread(*args)
DataMapFread = _rtserver.DataMapFread

def DataMapDecodeBuffer(*args):
  return _rtserver.DataMapDecodeBuffer(*args)
DataMapDecodeBuffer = _rtserver.DataMapDecodeBuffer

def DataMapReadBlock(*args):
  return _rtserver.DataMapReadBlock(*args)
DataMapReadBlock = _rtserver.DataMapReadBlock

def DataMapFreadBlock(*args):
  return _rtserver.DataMapFreadBlock(*args)
DataMapFreadBlock = _rtserver.DataMapFreadBlock

def DataMapReadBlockZ(*args):
  return _rtserver.DataMapReadBlockZ(*args)
DataMapReadBlockZ = _rtserver.DataMapReadBlockZ

def DataMapReadZ(*args):
  return _rtserver.DataMapReadZ(*args)
DataMapReadZ = _rtserver.DataMapReadZ

def DataMapWriteZ(*args):
  return _rtserver.DataMapWriteZ(*args)
DataMapWriteZ = _rtserver.DataMapWriteZ

def DataMapMergeArray(*args):
  return _rtserver.DataMapMergeArray(*args)
DataMapMergeArray = _rtserver.DataMapMergeArray

def DataMapMerge(*args):
  return _rtserver.DataMapMerge(*args)
DataMapMerge = _rtserver.DataMapMerge
class RadarParm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarParm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarParm, name)
    __repr__ = _swig_repr
    __swig_getmethods__["revision"] = _rtserver.RadarParm_revision_get
    if _newclass:revision = _swig_property(_rtserver.RadarParm_revision_get)
    __swig_getmethods__["origin"] = _rtserver.RadarParm_origin_get
    if _newclass:origin = _swig_property(_rtserver.RadarParm_origin_get)
    __swig_setmethods__["cp"] = _rtserver.RadarParm_cp_set
    __swig_getmethods__["cp"] = _rtserver.RadarParm_cp_get
    if _newclass:cp = _swig_property(_rtserver.RadarParm_cp_get, _rtserver.RadarParm_cp_set)
    __swig_setmethods__["stid"] = _rtserver.RadarParm_stid_set
    __swig_getmethods__["stid"] = _rtserver.RadarParm_stid_get
    if _newclass:stid = _swig_property(_rtserver.RadarParm_stid_get, _rtserver.RadarParm_stid_set)
    __swig_getmethods__["time"] = _rtserver.RadarParm_time_get
    if _newclass:time = _swig_property(_rtserver.RadarParm_time_get)
    __swig_setmethods__["txpow"] = _rtserver.RadarParm_txpow_set
    __swig_getmethods__["txpow"] = _rtserver.RadarParm_txpow_get
    if _newclass:txpow = _swig_property(_rtserver.RadarParm_txpow_get, _rtserver.RadarParm_txpow_set)
    __swig_setmethods__["nave"] = _rtserver.RadarParm_nave_set
    __swig_getmethods__["nave"] = _rtserver.RadarParm_nave_get
    if _newclass:nave = _swig_property(_rtserver.RadarParm_nave_get, _rtserver.RadarParm_nave_set)
    __swig_setmethods__["atten"] = _rtserver.RadarParm_atten_set
    __swig_getmethods__["atten"] = _rtserver.RadarParm_atten_get
    if _newclass:atten = _swig_property(_rtserver.RadarParm_atten_get, _rtserver.RadarParm_atten_set)
    __swig_setmethods__["lagfr"] = _rtserver.RadarParm_lagfr_set
    __swig_getmethods__["lagfr"] = _rtserver.RadarParm_lagfr_get
    if _newclass:lagfr = _swig_property(_rtserver.RadarParm_lagfr_get, _rtserver.RadarParm_lagfr_set)
    __swig_setmethods__["smsep"] = _rtserver.RadarParm_smsep_set
    __swig_getmethods__["smsep"] = _rtserver.RadarParm_smsep_get
    if _newclass:smsep = _swig_property(_rtserver.RadarParm_smsep_get, _rtserver.RadarParm_smsep_set)
    __swig_setmethods__["ercod"] = _rtserver.RadarParm_ercod_set
    __swig_getmethods__["ercod"] = _rtserver.RadarParm_ercod_get
    if _newclass:ercod = _swig_property(_rtserver.RadarParm_ercod_get, _rtserver.RadarParm_ercod_set)
    __swig_getmethods__["stat"] = _rtserver.RadarParm_stat_get
    if _newclass:stat = _swig_property(_rtserver.RadarParm_stat_get)
    __swig_getmethods__["noise"] = _rtserver.RadarParm_noise_get
    if _newclass:noise = _swig_property(_rtserver.RadarParm_noise_get)
    __swig_setmethods__["channel"] = _rtserver.RadarParm_channel_set
    __swig_getmethods__["channel"] = _rtserver.RadarParm_channel_get
    if _newclass:channel = _swig_property(_rtserver.RadarParm_channel_get, _rtserver.RadarParm_channel_set)
    __swig_setmethods__["bmnum"] = _rtserver.RadarParm_bmnum_set
    __swig_getmethods__["bmnum"] = _rtserver.RadarParm_bmnum_get
    if _newclass:bmnum = _swig_property(_rtserver.RadarParm_bmnum_get, _rtserver.RadarParm_bmnum_set)
    __swig_setmethods__["bmazm"] = _rtserver.RadarParm_bmazm_set
    __swig_getmethods__["bmazm"] = _rtserver.RadarParm_bmazm_get
    if _newclass:bmazm = _swig_property(_rtserver.RadarParm_bmazm_get, _rtserver.RadarParm_bmazm_set)
    __swig_setmethods__["scan"] = _rtserver.RadarParm_scan_set
    __swig_getmethods__["scan"] = _rtserver.RadarParm_scan_get
    if _newclass:scan = _swig_property(_rtserver.RadarParm_scan_get, _rtserver.RadarParm_scan_set)
    __swig_setmethods__["rxrise"] = _rtserver.RadarParm_rxrise_set
    __swig_getmethods__["rxrise"] = _rtserver.RadarParm_rxrise_get
    if _newclass:rxrise = _swig_property(_rtserver.RadarParm_rxrise_get, _rtserver.RadarParm_rxrise_set)
    __swig_getmethods__["intt"] = _rtserver.RadarParm_intt_get
    if _newclass:intt = _swig_property(_rtserver.RadarParm_intt_get)
    __swig_setmethods__["txpl"] = _rtserver.RadarParm_txpl_set
    __swig_getmethods__["txpl"] = _rtserver.RadarParm_txpl_get
    if _newclass:txpl = _swig_property(_rtserver.RadarParm_txpl_get, _rtserver.RadarParm_txpl_set)
    __swig_setmethods__["mpinc"] = _rtserver.RadarParm_mpinc_set
    __swig_getmethods__["mpinc"] = _rtserver.RadarParm_mpinc_get
    if _newclass:mpinc = _swig_property(_rtserver.RadarParm_mpinc_get, _rtserver.RadarParm_mpinc_set)
    __swig_setmethods__["mppul"] = _rtserver.RadarParm_mppul_set
    __swig_getmethods__["mppul"] = _rtserver.RadarParm_mppul_get
    if _newclass:mppul = _swig_property(_rtserver.RadarParm_mppul_get, _rtserver.RadarParm_mppul_set)
    __swig_setmethods__["mplgs"] = _rtserver.RadarParm_mplgs_set
    __swig_getmethods__["mplgs"] = _rtserver.RadarParm_mplgs_get
    if _newclass:mplgs = _swig_property(_rtserver.RadarParm_mplgs_get, _rtserver.RadarParm_mplgs_set)
    __swig_setmethods__["mplgexs"] = _rtserver.RadarParm_mplgexs_set
    __swig_getmethods__["mplgexs"] = _rtserver.RadarParm_mplgexs_get
    if _newclass:mplgexs = _swig_property(_rtserver.RadarParm_mplgexs_get, _rtserver.RadarParm_mplgexs_set)
    __swig_setmethods__["nrang"] = _rtserver.RadarParm_nrang_set
    __swig_getmethods__["nrang"] = _rtserver.RadarParm_nrang_get
    if _newclass:nrang = _swig_property(_rtserver.RadarParm_nrang_get, _rtserver.RadarParm_nrang_set)
    __swig_setmethods__["frang"] = _rtserver.RadarParm_frang_set
    __swig_getmethods__["frang"] = _rtserver.RadarParm_frang_get
    if _newclass:frang = _swig_property(_rtserver.RadarParm_frang_get, _rtserver.RadarParm_frang_set)
    __swig_setmethods__["rsep"] = _rtserver.RadarParm_rsep_set
    __swig_getmethods__["rsep"] = _rtserver.RadarParm_rsep_get
    if _newclass:rsep = _swig_property(_rtserver.RadarParm_rsep_get, _rtserver.RadarParm_rsep_set)
    __swig_setmethods__["xcf"] = _rtserver.RadarParm_xcf_set
    __swig_getmethods__["xcf"] = _rtserver.RadarParm_xcf_get
    if _newclass:xcf = _swig_property(_rtserver.RadarParm_xcf_get, _rtserver.RadarParm_xcf_set)
    __swig_setmethods__["tfreq"] = _rtserver.RadarParm_tfreq_set
    __swig_getmethods__["tfreq"] = _rtserver.RadarParm_tfreq_get
    if _newclass:tfreq = _swig_property(_rtserver.RadarParm_tfreq_get, _rtserver.RadarParm_tfreq_set)
    __swig_setmethods__["offset"] = _rtserver.RadarParm_offset_set
    __swig_getmethods__["offset"] = _rtserver.RadarParm_offset_get
    if _newclass:offset = _swig_property(_rtserver.RadarParm_offset_get, _rtserver.RadarParm_offset_set)
    __swig_setmethods__["ifmode"] = _rtserver.RadarParm_ifmode_set
    __swig_getmethods__["ifmode"] = _rtserver.RadarParm_ifmode_get
    if _newclass:ifmode = _swig_property(_rtserver.RadarParm_ifmode_get, _rtserver.RadarParm_ifmode_set)
    __swig_setmethods__["mxpwr"] = _rtserver.RadarParm_mxpwr_set
    __swig_getmethods__["mxpwr"] = _rtserver.RadarParm_mxpwr_get
    if _newclass:mxpwr = _swig_property(_rtserver.RadarParm_mxpwr_get, _rtserver.RadarParm_mxpwr_set)
    __swig_setmethods__["lvmax"] = _rtserver.RadarParm_lvmax_set
    __swig_getmethods__["lvmax"] = _rtserver.RadarParm_lvmax_get
    if _newclass:lvmax = _swig_property(_rtserver.RadarParm_lvmax_get, _rtserver.RadarParm_lvmax_set)
    __swig_setmethods__["pulse"] = _rtserver.RadarParm_pulse_set
    __swig_getmethods__["pulse"] = _rtserver.RadarParm_pulse_get
    if _newclass:pulse = _swig_property(_rtserver.RadarParm_pulse_get, _rtserver.RadarParm_pulse_set)
    __swig_setmethods__["lag"] = _rtserver.RadarParm_lag_set
    __swig_getmethods__["lag"] = _rtserver.RadarParm_lag_get
    if _newclass:lag = _swig_property(_rtserver.RadarParm_lag_get, _rtserver.RadarParm_lag_set)
    __swig_setmethods__["combf"] = _rtserver.RadarParm_combf_set
    __swig_getmethods__["combf"] = _rtserver.RadarParm_combf_get
    if _newclass:combf = _swig_property(_rtserver.RadarParm_combf_get, _rtserver.RadarParm_combf_set)
    def __init__(self): 
        this = _rtserver.new_RadarParm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarParm
    __del__ = lambda self : None;
RadarParm_swigregister = _rtserver.RadarParm_swigregister
RadarParm_swigregister(RadarParm)

class RadarParm_intt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarParm_intt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarParm_intt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sc"] = _rtserver.RadarParm_intt_sc_set
    __swig_getmethods__["sc"] = _rtserver.RadarParm_intt_sc_get
    if _newclass:sc = _swig_property(_rtserver.RadarParm_intt_sc_get, _rtserver.RadarParm_intt_sc_set)
    __swig_setmethods__["us"] = _rtserver.RadarParm_intt_us_set
    __swig_getmethods__["us"] = _rtserver.RadarParm_intt_us_get
    if _newclass:us = _swig_property(_rtserver.RadarParm_intt_us_get, _rtserver.RadarParm_intt_us_set)
    def __init__(self): 
        this = _rtserver.new_RadarParm_intt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarParm_intt
    __del__ = lambda self : None;
RadarParm_intt_swigregister = _rtserver.RadarParm_intt_swigregister
RadarParm_intt_swigregister(RadarParm_intt)

class RadarParm_noise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarParm_noise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarParm_noise, name)
    __repr__ = _swig_repr
    __swig_setmethods__["search"] = _rtserver.RadarParm_noise_search_set
    __swig_getmethods__["search"] = _rtserver.RadarParm_noise_search_get
    if _newclass:search = _swig_property(_rtserver.RadarParm_noise_search_get, _rtserver.RadarParm_noise_search_set)
    __swig_setmethods__["mean"] = _rtserver.RadarParm_noise_mean_set
    __swig_getmethods__["mean"] = _rtserver.RadarParm_noise_mean_get
    if _newclass:mean = _swig_property(_rtserver.RadarParm_noise_mean_get, _rtserver.RadarParm_noise_mean_set)
    def __init__(self): 
        this = _rtserver.new_RadarParm_noise()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarParm_noise
    __del__ = lambda self : None;
RadarParm_noise_swigregister = _rtserver.RadarParm_noise_swigregister
RadarParm_noise_swigregister(RadarParm_noise)

class RadarParm_stat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarParm_stat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarParm_stat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["agc"] = _rtserver.RadarParm_stat_agc_set
    __swig_getmethods__["agc"] = _rtserver.RadarParm_stat_agc_get
    if _newclass:agc = _swig_property(_rtserver.RadarParm_stat_agc_get, _rtserver.RadarParm_stat_agc_set)
    __swig_setmethods__["lopwr"] = _rtserver.RadarParm_stat_lopwr_set
    __swig_getmethods__["lopwr"] = _rtserver.RadarParm_stat_lopwr_get
    if _newclass:lopwr = _swig_property(_rtserver.RadarParm_stat_lopwr_get, _rtserver.RadarParm_stat_lopwr_set)
    def __init__(self): 
        this = _rtserver.new_RadarParm_stat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarParm_stat
    __del__ = lambda self : None;
RadarParm_stat_swigregister = _rtserver.RadarParm_stat_swigregister
RadarParm_stat_swigregister(RadarParm_stat)

class RadarParm_time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarParm_time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarParm_time, name)
    __repr__ = _swig_repr
    __swig_setmethods__["yr"] = _rtserver.RadarParm_time_yr_set
    __swig_getmethods__["yr"] = _rtserver.RadarParm_time_yr_get
    if _newclass:yr = _swig_property(_rtserver.RadarParm_time_yr_get, _rtserver.RadarParm_time_yr_set)
    __swig_setmethods__["mo"] = _rtserver.RadarParm_time_mo_set
    __swig_getmethods__["mo"] = _rtserver.RadarParm_time_mo_get
    if _newclass:mo = _swig_property(_rtserver.RadarParm_time_mo_get, _rtserver.RadarParm_time_mo_set)
    __swig_setmethods__["dy"] = _rtserver.RadarParm_time_dy_set
    __swig_getmethods__["dy"] = _rtserver.RadarParm_time_dy_get
    if _newclass:dy = _swig_property(_rtserver.RadarParm_time_dy_get, _rtserver.RadarParm_time_dy_set)
    __swig_setmethods__["hr"] = _rtserver.RadarParm_time_hr_set
    __swig_getmethods__["hr"] = _rtserver.RadarParm_time_hr_get
    if _newclass:hr = _swig_property(_rtserver.RadarParm_time_hr_get, _rtserver.RadarParm_time_hr_set)
    __swig_setmethods__["mt"] = _rtserver.RadarParm_time_mt_set
    __swig_getmethods__["mt"] = _rtserver.RadarParm_time_mt_get
    if _newclass:mt = _swig_property(_rtserver.RadarParm_time_mt_get, _rtserver.RadarParm_time_mt_set)
    __swig_setmethods__["sc"] = _rtserver.RadarParm_time_sc_set
    __swig_getmethods__["sc"] = _rtserver.RadarParm_time_sc_get
    if _newclass:sc = _swig_property(_rtserver.RadarParm_time_sc_get, _rtserver.RadarParm_time_sc_set)
    __swig_setmethods__["us"] = _rtserver.RadarParm_time_us_set
    __swig_getmethods__["us"] = _rtserver.RadarParm_time_us_get
    if _newclass:us = _swig_property(_rtserver.RadarParm_time_us_get, _rtserver.RadarParm_time_us_set)
    def __init__(self): 
        this = _rtserver.new_RadarParm_time()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarParm_time
    __del__ = lambda self : None;
RadarParm_time_swigregister = _rtserver.RadarParm_time_swigregister
RadarParm_time_swigregister(RadarParm_time)

class RadarParm_origin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarParm_origin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarParm_origin, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _rtserver.RadarParm_origin_code_set
    __swig_getmethods__["code"] = _rtserver.RadarParm_origin_code_get
    if _newclass:code = _swig_property(_rtserver.RadarParm_origin_code_get, _rtserver.RadarParm_origin_code_set)
    __swig_setmethods__["time"] = _rtserver.RadarParm_origin_time_set
    __swig_getmethods__["time"] = _rtserver.RadarParm_origin_time_get
    if _newclass:time = _swig_property(_rtserver.RadarParm_origin_time_get, _rtserver.RadarParm_origin_time_set)
    __swig_setmethods__["command"] = _rtserver.RadarParm_origin_command_set
    __swig_getmethods__["command"] = _rtserver.RadarParm_origin_command_get
    if _newclass:command = _swig_property(_rtserver.RadarParm_origin_command_get, _rtserver.RadarParm_origin_command_set)
    def __init__(self): 
        this = _rtserver.new_RadarParm_origin()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarParm_origin
    __del__ = lambda self : None;
RadarParm_origin_swigregister = _rtserver.RadarParm_origin_swigregister
RadarParm_origin_swigregister(RadarParm_origin)

class RadarParm_revision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarParm_revision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarParm_revision, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _rtserver.RadarParm_revision_major_set
    __swig_getmethods__["major"] = _rtserver.RadarParm_revision_major_get
    if _newclass:major = _swig_property(_rtserver.RadarParm_revision_major_get, _rtserver.RadarParm_revision_major_set)
    __swig_setmethods__["minor"] = _rtserver.RadarParm_revision_minor_set
    __swig_getmethods__["minor"] = _rtserver.RadarParm_revision_minor_get
    if _newclass:minor = _swig_property(_rtserver.RadarParm_revision_minor_get, _rtserver.RadarParm_revision_minor_set)
    def __init__(self): 
        this = _rtserver.new_RadarParm_revision()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarParm_revision
    __del__ = lambda self : None;
RadarParm_revision_swigregister = _rtserver.RadarParm_revision_swigregister
RadarParm_revision_swigregister(RadarParm_revision)


def RadarParmMake():
  return _rtserver.RadarParmMake()
RadarParmMake = _rtserver.RadarParmMake

def RadarParmFree(*args):
  return _rtserver.RadarParmFree(*args)
RadarParmFree = _rtserver.RadarParmFree

def RadarParmSetOriginTime(*args):
  return _rtserver.RadarParmSetOriginTime(*args)
RadarParmSetOriginTime = _rtserver.RadarParmSetOriginTime

def RadarParmSetCombf(*args):
  return _rtserver.RadarParmSetCombf(*args)
RadarParmSetCombf = _rtserver.RadarParmSetCombf

def RadarParmSetPulse(*args):
  return _rtserver.RadarParmSetPulse(*args)
RadarParmSetPulse = _rtserver.RadarParmSetPulse

def RadarParmSetLag(*args):
  return _rtserver.RadarParmSetLag(*args)
RadarParmSetLag = _rtserver.RadarParmSetLag

def RadarParmEncode(*args):
  return _rtserver.RadarParmEncode(*args)
RadarParmEncode = _rtserver.RadarParmEncode

def RadarParmDecode(*args):
  return _rtserver.RadarParmDecode(*args)
RadarParmDecode = _rtserver.RadarParmDecode

def RadarParmFlatten(*args):
  return _rtserver.RadarParmFlatten(*args)
RadarParmFlatten = _rtserver.RadarParmFlatten

def RadarParmExpand(*args):
  return _rtserver.RadarParmExpand(*args)
RadarParmExpand = _rtserver.RadarParmExpand
class FitData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["revision"] = _rtserver.FitData_revision_get
    if _newclass:revision = _swig_property(_rtserver.FitData_revision_get)
    __swig_setmethods__["noise"] = _rtserver.FitData_noise_set
    __swig_getmethods__["noise"] = _rtserver.FitData_noise_get
    if _newclass:noise = _swig_property(_rtserver.FitData_noise_get, _rtserver.FitData_noise_set)
    __swig_setmethods__["rng"] = _rtserver.FitData_rng_set
    __swig_getmethods__["rng"] = _rtserver.FitData_rng_get
    if _newclass:rng = _swig_property(_rtserver.FitData_rng_get, _rtserver.FitData_rng_set)
    __swig_setmethods__["xrng"] = _rtserver.FitData_xrng_set
    __swig_getmethods__["xrng"] = _rtserver.FitData_xrng_get
    if _newclass:xrng = _swig_property(_rtserver.FitData_xrng_get, _rtserver.FitData_xrng_set)
    __swig_setmethods__["elv"] = _rtserver.FitData_elv_set
    __swig_getmethods__["elv"] = _rtserver.FitData_elv_get
    if _newclass:elv = _swig_property(_rtserver.FitData_elv_get, _rtserver.FitData_elv_set)
    def __init__(self): 
        this = _rtserver.new_FitData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_FitData
    __del__ = lambda self : None;
FitData_swigregister = _rtserver.FitData_swigregister
FitData_swigregister(FitData)

class FitData_revision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitData_revision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitData_revision, name)
    __repr__ = _swig_repr
    __swig_setmethods__["major"] = _rtserver.FitData_revision_major_set
    __swig_getmethods__["major"] = _rtserver.FitData_revision_major_get
    if _newclass:major = _swig_property(_rtserver.FitData_revision_major_get, _rtserver.FitData_revision_major_set)
    __swig_setmethods__["minor"] = _rtserver.FitData_revision_minor_set
    __swig_getmethods__["minor"] = _rtserver.FitData_revision_minor_get
    if _newclass:minor = _swig_property(_rtserver.FitData_revision_minor_get, _rtserver.FitData_revision_minor_set)
    def __init__(self): 
        this = _rtserver.new_FitData_revision()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_FitData_revision
    __del__ = lambda self : None;
FitData_revision_swigregister = _rtserver.FitData_revision_swigregister
FitData_revision_swigregister(FitData_revision)


def FitMake():
  return _rtserver.FitMake()
FitMake = _rtserver.FitMake

def FitFree(*args):
  return _rtserver.FitFree(*args)
FitFree = _rtserver.FitFree

def FitSetRng(*args):
  return _rtserver.FitSetRng(*args)
FitSetRng = _rtserver.FitSetRng

def FitSetXrng(*args):
  return _rtserver.FitSetXrng(*args)
FitSetXrng = _rtserver.FitSetXrng

def FitSetElv(*args):
  return _rtserver.FitSetElv(*args)
FitSetElv = _rtserver.FitSetElv

def FitFlatten(*args):
  return _rtserver.FitFlatten(*args)
FitFlatten = _rtserver.FitFlatten

def FitExpand(*args):
  return _rtserver.FitExpand(*args)
FitExpand = _rtserver.FitExpand
class FitPrm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitPrm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitPrm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel"] = _rtserver.FitPrm_channel_set
    __swig_getmethods__["channel"] = _rtserver.FitPrm_channel_get
    if _newclass:channel = _swig_property(_rtserver.FitPrm_channel_get, _rtserver.FitPrm_channel_set)
    __swig_setmethods__["offset"] = _rtserver.FitPrm_offset_set
    __swig_getmethods__["offset"] = _rtserver.FitPrm_offset_get
    if _newclass:offset = _swig_property(_rtserver.FitPrm_offset_get, _rtserver.FitPrm_offset_set)
    __swig_setmethods__["cp"] = _rtserver.FitPrm_cp_set
    __swig_getmethods__["cp"] = _rtserver.FitPrm_cp_get
    if _newclass:cp = _swig_property(_rtserver.FitPrm_cp_get, _rtserver.FitPrm_cp_set)
    __swig_setmethods__["xcf"] = _rtserver.FitPrm_xcf_set
    __swig_getmethods__["xcf"] = _rtserver.FitPrm_xcf_get
    if _newclass:xcf = _swig_property(_rtserver.FitPrm_xcf_get, _rtserver.FitPrm_xcf_set)
    __swig_setmethods__["tfreq"] = _rtserver.FitPrm_tfreq_set
    __swig_getmethods__["tfreq"] = _rtserver.FitPrm_tfreq_get
    if _newclass:tfreq = _swig_property(_rtserver.FitPrm_tfreq_get, _rtserver.FitPrm_tfreq_set)
    __swig_setmethods__["noise"] = _rtserver.FitPrm_noise_set
    __swig_getmethods__["noise"] = _rtserver.FitPrm_noise_get
    if _newclass:noise = _swig_property(_rtserver.FitPrm_noise_get, _rtserver.FitPrm_noise_set)
    __swig_setmethods__["nrang"] = _rtserver.FitPrm_nrang_set
    __swig_getmethods__["nrang"] = _rtserver.FitPrm_nrang_get
    if _newclass:nrang = _swig_property(_rtserver.FitPrm_nrang_get, _rtserver.FitPrm_nrang_set)
    __swig_setmethods__["smsep"] = _rtserver.FitPrm_smsep_set
    __swig_getmethods__["smsep"] = _rtserver.FitPrm_smsep_get
    if _newclass:smsep = _swig_property(_rtserver.FitPrm_smsep_get, _rtserver.FitPrm_smsep_set)
    __swig_setmethods__["nave"] = _rtserver.FitPrm_nave_set
    __swig_getmethods__["nave"] = _rtserver.FitPrm_nave_get
    if _newclass:nave = _swig_property(_rtserver.FitPrm_nave_get, _rtserver.FitPrm_nave_set)
    __swig_setmethods__["mplgs"] = _rtserver.FitPrm_mplgs_set
    __swig_getmethods__["mplgs"] = _rtserver.FitPrm_mplgs_get
    if _newclass:mplgs = _swig_property(_rtserver.FitPrm_mplgs_get, _rtserver.FitPrm_mplgs_set)
    __swig_setmethods__["mpinc"] = _rtserver.FitPrm_mpinc_set
    __swig_getmethods__["mpinc"] = _rtserver.FitPrm_mpinc_get
    if _newclass:mpinc = _swig_property(_rtserver.FitPrm_mpinc_get, _rtserver.FitPrm_mpinc_set)
    __swig_setmethods__["txpl"] = _rtserver.FitPrm_txpl_set
    __swig_getmethods__["txpl"] = _rtserver.FitPrm_txpl_get
    if _newclass:txpl = _swig_property(_rtserver.FitPrm_txpl_get, _rtserver.FitPrm_txpl_set)
    __swig_setmethods__["lagfr"] = _rtserver.FitPrm_lagfr_set
    __swig_getmethods__["lagfr"] = _rtserver.FitPrm_lagfr_get
    if _newclass:lagfr = _swig_property(_rtserver.FitPrm_lagfr_get, _rtserver.FitPrm_lagfr_set)
    __swig_setmethods__["mppul"] = _rtserver.FitPrm_mppul_set
    __swig_getmethods__["mppul"] = _rtserver.FitPrm_mppul_get
    if _newclass:mppul = _swig_property(_rtserver.FitPrm_mppul_get, _rtserver.FitPrm_mppul_set)
    __swig_setmethods__["bmnum"] = _rtserver.FitPrm_bmnum_set
    __swig_getmethods__["bmnum"] = _rtserver.FitPrm_bmnum_get
    if _newclass:bmnum = _swig_property(_rtserver.FitPrm_bmnum_get, _rtserver.FitPrm_bmnum_set)
    __swig_setmethods__["old"] = _rtserver.FitPrm_old_set
    __swig_getmethods__["old"] = _rtserver.FitPrm_old_get
    if _newclass:old = _swig_property(_rtserver.FitPrm_old_get, _rtserver.FitPrm_old_set)
    __swig_setmethods__["lag"] = _rtserver.FitPrm_lag_set
    __swig_getmethods__["lag"] = _rtserver.FitPrm_lag_get
    if _newclass:lag = _swig_property(_rtserver.FitPrm_lag_get, _rtserver.FitPrm_lag_set)
    __swig_setmethods__["pulse"] = _rtserver.FitPrm_pulse_set
    __swig_getmethods__["pulse"] = _rtserver.FitPrm_pulse_get
    if _newclass:pulse = _swig_property(_rtserver.FitPrm_pulse_get, _rtserver.FitPrm_pulse_set)
    __swig_setmethods__["pwr0"] = _rtserver.FitPrm_pwr0_set
    __swig_getmethods__["pwr0"] = _rtserver.FitPrm_pwr0_get
    if _newclass:pwr0 = _swig_property(_rtserver.FitPrm_pwr0_get, _rtserver.FitPrm_pwr0_set)
    __swig_setmethods__["maxbeam"] = _rtserver.FitPrm_maxbeam_set
    __swig_getmethods__["maxbeam"] = _rtserver.FitPrm_maxbeam_get
    if _newclass:maxbeam = _swig_property(_rtserver.FitPrm_maxbeam_get, _rtserver.FitPrm_maxbeam_set)
    __swig_setmethods__["interfer"] = _rtserver.FitPrm_interfer_set
    __swig_getmethods__["interfer"] = _rtserver.FitPrm_interfer_get
    if _newclass:interfer = _swig_property(_rtserver.FitPrm_interfer_get, _rtserver.FitPrm_interfer_set)
    __swig_setmethods__["bmsep"] = _rtserver.FitPrm_bmsep_set
    __swig_getmethods__["bmsep"] = _rtserver.FitPrm_bmsep_get
    if _newclass:bmsep = _swig_property(_rtserver.FitPrm_bmsep_get, _rtserver.FitPrm_bmsep_set)
    __swig_setmethods__["phidiff"] = _rtserver.FitPrm_phidiff_set
    __swig_getmethods__["phidiff"] = _rtserver.FitPrm_phidiff_get
    if _newclass:phidiff = _swig_property(_rtserver.FitPrm_phidiff_get, _rtserver.FitPrm_phidiff_set)
    __swig_setmethods__["tdiff"] = _rtserver.FitPrm_tdiff_set
    __swig_getmethods__["tdiff"] = _rtserver.FitPrm_tdiff_get
    if _newclass:tdiff = _swig_property(_rtserver.FitPrm_tdiff_get, _rtserver.FitPrm_tdiff_set)
    __swig_setmethods__["vdir"] = _rtserver.FitPrm_vdir_set
    __swig_getmethods__["vdir"] = _rtserver.FitPrm_vdir_get
    if _newclass:vdir = _swig_property(_rtserver.FitPrm_vdir_get, _rtserver.FitPrm_vdir_set)
    def __init__(self): 
        this = _rtserver.new_FitPrm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_FitPrm
    __del__ = lambda self : None;
FitPrm_swigregister = _rtserver.FitPrm_swigregister
FitPrm_swigregister(FitPrm)

class FitBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prm"] = _rtserver.FitBlock_prm_set
    __swig_getmethods__["prm"] = _rtserver.FitBlock_prm_get
    if _newclass:prm = _swig_property(_rtserver.FitBlock_prm_get, _rtserver.FitBlock_prm_set)
    __swig_setmethods__["acfd"] = _rtserver.FitBlock_acfd_set
    __swig_getmethods__["acfd"] = _rtserver.FitBlock_acfd_get
    if _newclass:acfd = _swig_property(_rtserver.FitBlock_acfd_get, _rtserver.FitBlock_acfd_set)
    __swig_setmethods__["xcfd"] = _rtserver.FitBlock_xcfd_set
    __swig_getmethods__["xcfd"] = _rtserver.FitBlock_xcfd_get
    if _newclass:xcfd = _swig_property(_rtserver.FitBlock_xcfd_get, _rtserver.FitBlock_xcfd_set)
    def __init__(self): 
        this = _rtserver.new_FitBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_FitBlock
    __del__ = lambda self : None;
FitBlock_swigregister = _rtserver.FitBlock_swigregister
FitBlock_swigregister(FitBlock)

class FitElv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitElv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitElv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["normal"] = _rtserver.FitElv_normal_set
    __swig_getmethods__["normal"] = _rtserver.FitElv_normal_get
    if _newclass:normal = _swig_property(_rtserver.FitElv_normal_get, _rtserver.FitElv_normal_set)
    __swig_setmethods__["low"] = _rtserver.FitElv_low_set
    __swig_getmethods__["low"] = _rtserver.FitElv_low_get
    if _newclass:low = _swig_property(_rtserver.FitElv_low_get, _rtserver.FitElv_low_set)
    __swig_setmethods__["high"] = _rtserver.FitElv_high_set
    __swig_getmethods__["high"] = _rtserver.FitElv_high_get
    if _newclass:high = _swig_property(_rtserver.FitElv_high_get, _rtserver.FitElv_high_set)
    def __init__(self): 
        this = _rtserver.new_FitElv()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_FitElv
    __del__ = lambda self : None;
FitElv_swigregister = _rtserver.FitElv_swigregister
FitElv_swigregister(FitElv)

class FitNoise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitNoise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitNoise, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vel"] = _rtserver.FitNoise_vel_set
    __swig_getmethods__["vel"] = _rtserver.FitNoise_vel_get
    if _newclass:vel = _swig_property(_rtserver.FitNoise_vel_get, _rtserver.FitNoise_vel_set)
    __swig_setmethods__["skynoise"] = _rtserver.FitNoise_skynoise_set
    __swig_getmethods__["skynoise"] = _rtserver.FitNoise_skynoise_get
    if _newclass:skynoise = _swig_property(_rtserver.FitNoise_skynoise_get, _rtserver.FitNoise_skynoise_set)
    __swig_setmethods__["lag0"] = _rtserver.FitNoise_lag0_set
    __swig_getmethods__["lag0"] = _rtserver.FitNoise_lag0_get
    if _newclass:lag0 = _swig_property(_rtserver.FitNoise_lag0_get, _rtserver.FitNoise_lag0_set)
    def __init__(self): 
        this = _rtserver.new_FitNoise()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_FitNoise
    __del__ = lambda self : None;
FitNoise_swigregister = _rtserver.FitNoise_swigregister
FitNoise_swigregister(FitNoise)

class FitRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FitRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FitRange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _rtserver.FitRange_v_set
    __swig_getmethods__["v"] = _rtserver.FitRange_v_get
    if _newclass:v = _swig_property(_rtserver.FitRange_v_get, _rtserver.FitRange_v_set)
    __swig_setmethods__["v_err"] = _rtserver.FitRange_v_err_set
    __swig_getmethods__["v_err"] = _rtserver.FitRange_v_err_get
    if _newclass:v_err = _swig_property(_rtserver.FitRange_v_err_get, _rtserver.FitRange_v_err_set)
    __swig_setmethods__["p_0"] = _rtserver.FitRange_p_0_set
    __swig_getmethods__["p_0"] = _rtserver.FitRange_p_0_get
    if _newclass:p_0 = _swig_property(_rtserver.FitRange_p_0_get, _rtserver.FitRange_p_0_set)
    __swig_setmethods__["p_l"] = _rtserver.FitRange_p_l_set
    __swig_getmethods__["p_l"] = _rtserver.FitRange_p_l_get
    if _newclass:p_l = _swig_property(_rtserver.FitRange_p_l_get, _rtserver.FitRange_p_l_set)
    __swig_setmethods__["p_l_err"] = _rtserver.FitRange_p_l_err_set
    __swig_getmethods__["p_l_err"] = _rtserver.FitRange_p_l_err_get
    if _newclass:p_l_err = _swig_property(_rtserver.FitRange_p_l_err_get, _rtserver.FitRange_p_l_err_set)
    __swig_setmethods__["p_s"] = _rtserver.FitRange_p_s_set
    __swig_getmethods__["p_s"] = _rtserver.FitRange_p_s_get
    if _newclass:p_s = _swig_property(_rtserver.FitRange_p_s_get, _rtserver.FitRange_p_s_set)
    __swig_setmethods__["p_s_err"] = _rtserver.FitRange_p_s_err_set
    __swig_getmethods__["p_s_err"] = _rtserver.FitRange_p_s_err_get
    if _newclass:p_s_err = _swig_property(_rtserver.FitRange_p_s_err_get, _rtserver.FitRange_p_s_err_set)
    __swig_setmethods__["w_l"] = _rtserver.FitRange_w_l_set
    __swig_getmethods__["w_l"] = _rtserver.FitRange_w_l_get
    if _newclass:w_l = _swig_property(_rtserver.FitRange_w_l_get, _rtserver.FitRange_w_l_set)
    __swig_setmethods__["w_l_err"] = _rtserver.FitRange_w_l_err_set
    __swig_getmethods__["w_l_err"] = _rtserver.FitRange_w_l_err_get
    if _newclass:w_l_err = _swig_property(_rtserver.FitRange_w_l_err_get, _rtserver.FitRange_w_l_err_set)
    __swig_setmethods__["w_s"] = _rtserver.FitRange_w_s_set
    __swig_getmethods__["w_s"] = _rtserver.FitRange_w_s_get
    if _newclass:w_s = _swig_property(_rtserver.FitRange_w_s_get, _rtserver.FitRange_w_s_set)
    __swig_setmethods__["w_s_err"] = _rtserver.FitRange_w_s_err_set
    __swig_getmethods__["w_s_err"] = _rtserver.FitRange_w_s_err_get
    if _newclass:w_s_err = _swig_property(_rtserver.FitRange_w_s_err_get, _rtserver.FitRange_w_s_err_set)
    __swig_setmethods__["phi0"] = _rtserver.FitRange_phi0_set
    __swig_getmethods__["phi0"] = _rtserver.FitRange_phi0_get
    if _newclass:phi0 = _swig_property(_rtserver.FitRange_phi0_get, _rtserver.FitRange_phi0_set)
    __swig_setmethods__["phi0_err"] = _rtserver.FitRange_phi0_err_set
    __swig_getmethods__["phi0_err"] = _rtserver.FitRange_phi0_err_get
    if _newclass:phi0_err = _swig_property(_rtserver.FitRange_phi0_err_get, _rtserver.FitRange_phi0_err_set)
    __swig_setmethods__["sdev_l"] = _rtserver.FitRange_sdev_l_set
    __swig_getmethods__["sdev_l"] = _rtserver.FitRange_sdev_l_get
    if _newclass:sdev_l = _swig_property(_rtserver.FitRange_sdev_l_get, _rtserver.FitRange_sdev_l_set)
    __swig_setmethods__["sdev_s"] = _rtserver.FitRange_sdev_s_set
    __swig_getmethods__["sdev_s"] = _rtserver.FitRange_sdev_s_get
    if _newclass:sdev_s = _swig_property(_rtserver.FitRange_sdev_s_get, _rtserver.FitRange_sdev_s_set)
    __swig_setmethods__["sdev_phi"] = _rtserver.FitRange_sdev_phi_set
    __swig_getmethods__["sdev_phi"] = _rtserver.FitRange_sdev_phi_get
    if _newclass:sdev_phi = _swig_property(_rtserver.FitRange_sdev_phi_get, _rtserver.FitRange_sdev_phi_set)
    __swig_setmethods__["qflg"] = _rtserver.FitRange_qflg_set
    __swig_getmethods__["qflg"] = _rtserver.FitRange_qflg_get
    if _newclass:qflg = _swig_property(_rtserver.FitRange_qflg_get, _rtserver.FitRange_qflg_set)
    __swig_setmethods__["gsct"] = _rtserver.FitRange_gsct_set
    __swig_getmethods__["gsct"] = _rtserver.FitRange_gsct_get
    if _newclass:gsct = _swig_property(_rtserver.FitRange_gsct_get, _rtserver.FitRange_gsct_set)
    __swig_setmethods__["nump"] = _rtserver.FitRange_nump_set
    __swig_getmethods__["nump"] = _rtserver.FitRange_nump_get
    if _newclass:nump = _swig_property(_rtserver.FitRange_nump_get, _rtserver.FitRange_nump_set)
    def __init__(self): 
        this = _rtserver.new_FitRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_FitRange
    __del__ = lambda self : None;
FitRange_swigregister = _rtserver.FitRange_swigregister
FitRange_swigregister(FitRange)

class RadarSite(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarSite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarSite, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tval"] = _rtserver.RadarSite_tval_set
    __swig_getmethods__["tval"] = _rtserver.RadarSite_tval_get
    if _newclass:tval = _swig_property(_rtserver.RadarSite_tval_get, _rtserver.RadarSite_tval_set)
    __swig_setmethods__["geolat"] = _rtserver.RadarSite_geolat_set
    __swig_getmethods__["geolat"] = _rtserver.RadarSite_geolat_get
    if _newclass:geolat = _swig_property(_rtserver.RadarSite_geolat_get, _rtserver.RadarSite_geolat_set)
    __swig_setmethods__["geolon"] = _rtserver.RadarSite_geolon_set
    __swig_getmethods__["geolon"] = _rtserver.RadarSite_geolon_get
    if _newclass:geolon = _swig_property(_rtserver.RadarSite_geolon_get, _rtserver.RadarSite_geolon_set)
    __swig_setmethods__["alt"] = _rtserver.RadarSite_alt_set
    __swig_getmethods__["alt"] = _rtserver.RadarSite_alt_get
    if _newclass:alt = _swig_property(_rtserver.RadarSite_alt_get, _rtserver.RadarSite_alt_set)
    __swig_setmethods__["boresite"] = _rtserver.RadarSite_boresite_set
    __swig_getmethods__["boresite"] = _rtserver.RadarSite_boresite_get
    if _newclass:boresite = _swig_property(_rtserver.RadarSite_boresite_get, _rtserver.RadarSite_boresite_set)
    __swig_setmethods__["bmsep"] = _rtserver.RadarSite_bmsep_set
    __swig_getmethods__["bmsep"] = _rtserver.RadarSite_bmsep_get
    if _newclass:bmsep = _swig_property(_rtserver.RadarSite_bmsep_get, _rtserver.RadarSite_bmsep_set)
    __swig_setmethods__["vdir"] = _rtserver.RadarSite_vdir_set
    __swig_getmethods__["vdir"] = _rtserver.RadarSite_vdir_get
    if _newclass:vdir = _swig_property(_rtserver.RadarSite_vdir_get, _rtserver.RadarSite_vdir_set)
    __swig_setmethods__["atten"] = _rtserver.RadarSite_atten_set
    __swig_getmethods__["atten"] = _rtserver.RadarSite_atten_get
    if _newclass:atten = _swig_property(_rtserver.RadarSite_atten_get, _rtserver.RadarSite_atten_set)
    __swig_setmethods__["tdiff"] = _rtserver.RadarSite_tdiff_set
    __swig_getmethods__["tdiff"] = _rtserver.RadarSite_tdiff_get
    if _newclass:tdiff = _swig_property(_rtserver.RadarSite_tdiff_get, _rtserver.RadarSite_tdiff_set)
    __swig_setmethods__["phidiff"] = _rtserver.RadarSite_phidiff_set
    __swig_getmethods__["phidiff"] = _rtserver.RadarSite_phidiff_get
    if _newclass:phidiff = _swig_property(_rtserver.RadarSite_phidiff_get, _rtserver.RadarSite_phidiff_set)
    __swig_setmethods__["interfer"] = _rtserver.RadarSite_interfer_set
    __swig_getmethods__["interfer"] = _rtserver.RadarSite_interfer_get
    if _newclass:interfer = _swig_property(_rtserver.RadarSite_interfer_get, _rtserver.RadarSite_interfer_set)
    __swig_setmethods__["recrise"] = _rtserver.RadarSite_recrise_set
    __swig_getmethods__["recrise"] = _rtserver.RadarSite_recrise_get
    if _newclass:recrise = _swig_property(_rtserver.RadarSite_recrise_get, _rtserver.RadarSite_recrise_set)
    __swig_setmethods__["maxatten"] = _rtserver.RadarSite_maxatten_set
    __swig_getmethods__["maxatten"] = _rtserver.RadarSite_maxatten_get
    if _newclass:maxatten = _swig_property(_rtserver.RadarSite_maxatten_get, _rtserver.RadarSite_maxatten_set)
    __swig_setmethods__["maxrange"] = _rtserver.RadarSite_maxrange_set
    __swig_getmethods__["maxrange"] = _rtserver.RadarSite_maxrange_get
    if _newclass:maxrange = _swig_property(_rtserver.RadarSite_maxrange_get, _rtserver.RadarSite_maxrange_set)
    __swig_setmethods__["maxbeam"] = _rtserver.RadarSite_maxbeam_set
    __swig_getmethods__["maxbeam"] = _rtserver.RadarSite_maxbeam_get
    if _newclass:maxbeam = _swig_property(_rtserver.RadarSite_maxbeam_get, _rtserver.RadarSite_maxbeam_set)
    def __init__(self): 
        this = _rtserver.new_RadarSite()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarSite
    __del__ = lambda self : None;
RadarSite_swigregister = _rtserver.RadarSite_swigregister
RadarSite_swigregister(RadarSite)

class Radar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Radar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Radar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _rtserver.Radar_id_set
    __swig_getmethods__["id"] = _rtserver.Radar_id_get
    if _newclass:id = _swig_property(_rtserver.Radar_id_get, _rtserver.Radar_id_set)
    __swig_setmethods__["status"] = _rtserver.Radar_status_set
    __swig_getmethods__["status"] = _rtserver.Radar_status_get
    if _newclass:status = _swig_property(_rtserver.Radar_status_get, _rtserver.Radar_status_set)
    __swig_setmethods__["cnum"] = _rtserver.Radar_cnum_set
    __swig_getmethods__["cnum"] = _rtserver.Radar_cnum_get
    if _newclass:cnum = _swig_property(_rtserver.Radar_cnum_get, _rtserver.Radar_cnum_set)
    __swig_setmethods__["code"] = _rtserver.Radar_code_set
    __swig_getmethods__["code"] = _rtserver.Radar_code_get
    if _newclass:code = _swig_property(_rtserver.Radar_code_get, _rtserver.Radar_code_set)
    __swig_setmethods__["name"] = _rtserver.Radar_name_set
    __swig_getmethods__["name"] = _rtserver.Radar_name_get
    if _newclass:name = _swig_property(_rtserver.Radar_name_get, _rtserver.Radar_name_set)
    __swig_setmethods__["operator"] = _rtserver.Radar_operator_set
    __swig_getmethods__["operator"] = _rtserver.Radar_operator_get
    if _newclass:operator = _swig_property(_rtserver.Radar_operator_get, _rtserver.Radar_operator_set)
    __swig_setmethods__["hdwfname"] = _rtserver.Radar_hdwfname_set
    __swig_getmethods__["hdwfname"] = _rtserver.Radar_hdwfname_get
    if _newclass:hdwfname = _swig_property(_rtserver.Radar_hdwfname_get, _rtserver.Radar_hdwfname_set)
    __swig_setmethods__["st_time"] = _rtserver.Radar_st_time_set
    __swig_getmethods__["st_time"] = _rtserver.Radar_st_time_get
    if _newclass:st_time = _swig_property(_rtserver.Radar_st_time_get, _rtserver.Radar_st_time_set)
    __swig_setmethods__["ed_time"] = _rtserver.Radar_ed_time_set
    __swig_getmethods__["ed_time"] = _rtserver.Radar_ed_time_get
    if _newclass:ed_time = _swig_property(_rtserver.Radar_ed_time_get, _rtserver.Radar_ed_time_set)
    __swig_setmethods__["snum"] = _rtserver.Radar_snum_set
    __swig_getmethods__["snum"] = _rtserver.Radar_snum_get
    if _newclass:snum = _swig_property(_rtserver.Radar_snum_get, _rtserver.Radar_snum_set)
    __swig_setmethods__["site"] = _rtserver.Radar_site_set
    __swig_getmethods__["site"] = _rtserver.Radar_site_get
    if _newclass:site = _swig_property(_rtserver.Radar_site_get, _rtserver.Radar_site_set)
    def __init__(self): 
        this = _rtserver.new_Radar()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_Radar
    __del__ = lambda self : None;
Radar_swigregister = _rtserver.Radar_swigregister
Radar_swigregister(Radar)

class RadarNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadarNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RadarNetwork, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rnum"] = _rtserver.RadarNetwork_rnum_set
    __swig_getmethods__["rnum"] = _rtserver.RadarNetwork_rnum_get
    if _newclass:rnum = _swig_property(_rtserver.RadarNetwork_rnum_get, _rtserver.RadarNetwork_rnum_set)
    __swig_setmethods__["radar"] = _rtserver.RadarNetwork_radar_set
    __swig_getmethods__["radar"] = _rtserver.RadarNetwork_radar_get
    if _newclass:radar = _swig_property(_rtserver.RadarNetwork_radar_get, _rtserver.RadarNetwork_radar_set)
    def __init__(self): 
        this = _rtserver.new_RadarNetwork()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RadarNetwork
    __del__ = lambda self : None;
RadarNetwork_swigregister = _rtserver.RadarNetwork_swigregister
RadarNetwork_swigregister(RadarNetwork)


def RadarEpochGetSite(*args):
  return _rtserver.RadarEpochGetSite(*args)
RadarEpochGetSite = _rtserver.RadarEpochGetSite

def RadarYMDHMSGetSite(*args):
  return _rtserver.RadarYMDHMSGetSite(*args)
RadarYMDHMSGetSite = _rtserver.RadarYMDHMSGetSite

def RadarGetRadar(*args):
  return _rtserver.RadarGetRadar(*args)
RadarGetRadar = _rtserver.RadarGetRadar

def RadarGetID(*args):
  return _rtserver.RadarGetID(*args)
RadarGetID = _rtserver.RadarGetID

def RadarGetCodeNum(*args):
  return _rtserver.RadarGetCodeNum(*args)
RadarGetCodeNum = _rtserver.RadarGetCodeNum

def RadarGetCode(*args):
  return _rtserver.RadarGetCode(*args)
RadarGetCode = _rtserver.RadarGetCode

def RadarGetName(*args):
  return _rtserver.RadarGetName(*args)
RadarGetName = _rtserver.RadarGetName

def RadarGetOperator(*args):
  return _rtserver.RadarGetOperator(*args)
RadarGetOperator = _rtserver.RadarGetOperator

def RadarGetStatus(*args):
  return _rtserver.RadarGetStatus(*args)
RadarGetStatus = _rtserver.RadarGetStatus

def RadarFree(*args):
  return _rtserver.RadarFree(*args)
RadarFree = _rtserver.RadarFree

def RadarLoad(*args):
  return _rtserver.RadarLoad(*args)
RadarLoad = _rtserver.RadarLoad

def RadarLoadHardware(*args):
  return _rtserver.RadarLoadHardware(*args)
RadarLoadHardware = _rtserver.RadarLoadHardware
PRM_TYPE = _rtserver.PRM_TYPE
FIT_TYPE = _rtserver.FIT_TYPE
RAW_TYPE = _rtserver.RAW_TYPE
NME_TYPE = _rtserver.NME_TYPE
BADTR_TYPE = _rtserver.BADTR_TYPE
IQ_TYPE = _rtserver.IQ_TYPE
IQS_TYPE = _rtserver.IQS_TYPE
IQO_TYPE = _rtserver.IQO_TYPE
MAX_BUF = _rtserver.MAX_BUF
TASK_OPEN = _rtserver.TASK_OPEN
TASK_CLOSE = _rtserver.TASK_CLOSE
TASK_QUIT = _rtserver.TASK_QUIT
TASK_DATA = _rtserver.TASK_DATA
TASK_RESET = _rtserver.TASK_RESET
TASK_OK = _rtserver.TASK_OK
TASK_ERR = _rtserver.TASK_ERR
UNKNOWN_TYPE = _rtserver.UNKNOWN_TYPE
class RMsgData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMsgData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMsgData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _rtserver.RMsgData_type_set
    __swig_getmethods__["type"] = _rtserver.RMsgData_type_get
    if _newclass:type = _swig_property(_rtserver.RMsgData_type_get, _rtserver.RMsgData_type_set)
    __swig_setmethods__["tag"] = _rtserver.RMsgData_tag_set
    __swig_getmethods__["tag"] = _rtserver.RMsgData_tag_get
    if _newclass:tag = _swig_property(_rtserver.RMsgData_tag_get, _rtserver.RMsgData_tag_set)
    __swig_setmethods__["size"] = _rtserver.RMsgData_size_set
    __swig_getmethods__["size"] = _rtserver.RMsgData_size_get
    if _newclass:size = _swig_property(_rtserver.RMsgData_size_get, _rtserver.RMsgData_size_set)
    __swig_setmethods__["index"] = _rtserver.RMsgData_index_set
    __swig_getmethods__["index"] = _rtserver.RMsgData_index_get
    if _newclass:index = _swig_property(_rtserver.RMsgData_index_get, _rtserver.RMsgData_index_set)
    def __init__(self): 
        this = _rtserver.new_RMsgData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RMsgData
    __del__ = lambda self : None;
RMsgData_swigregister = _rtserver.RMsgData_swigregister
RMsgData_swigregister(RMsgData)

class RMsgBlock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RMsgBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RMsgBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _rtserver.RMsgBlock_num_set
    __swig_getmethods__["num"] = _rtserver.RMsgBlock_num_get
    if _newclass:num = _swig_property(_rtserver.RMsgBlock_num_get, _rtserver.RMsgBlock_num_set)
    __swig_setmethods__["tsize"] = _rtserver.RMsgBlock_tsize_set
    __swig_getmethods__["tsize"] = _rtserver.RMsgBlock_tsize_get
    if _newclass:tsize = _swig_property(_rtserver.RMsgBlock_tsize_get, _rtserver.RMsgBlock_tsize_set)
    __swig_setmethods__["data"] = _rtserver.RMsgBlock_data_set
    __swig_getmethods__["data"] = _rtserver.RMsgBlock_data_get
    if _newclass:data = _swig_property(_rtserver.RMsgBlock_data_get, _rtserver.RMsgBlock_data_set)
    __swig_setmethods__["ptr"] = _rtserver.RMsgBlock_ptr_set
    __swig_getmethods__["ptr"] = _rtserver.RMsgBlock_ptr_get
    if _newclass:ptr = _swig_property(_rtserver.RMsgBlock_ptr_get, _rtserver.RMsgBlock_ptr_set)
    def __init__(self): 
        this = _rtserver.new_RMsgBlock()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtserver.delete_RMsgBlock
    __del__ = lambda self : None;
RMsgBlock_swigregister = _rtserver.RMsgBlock_swigregister
RMsgBlock_swigregister(RMsgBlock)


def RMsgRcvDecodeData(*args):
  return _rtserver.RMsgRcvDecodeData(*args)
RMsgRcvDecodeData = _rtserver.RMsgRcvDecodeData

def RMsgRcvDecodeOpen(*args):
  return _rtserver.RMsgRcvDecodeOpen(*args)
RMsgRcvDecodeOpen = _rtserver.RMsgRcvDecodeOpen
ERROR_MSG = _rtserver.ERROR_MSG
ERROR_OK = _rtserver.ERROR_OK
ERROR_FAIL = _rtserver.ERROR_FAIL

def ErrLog(*args):
  return _rtserver.ErrLog(*args)
ErrLog = _rtserver.ErrLog

def fitpacket(*args):
  return _rtserver.fitpacket(*args)
fitpacket = _rtserver.fitpacket

def forkinet(*args):
  return _rtserver.forkinet(*args)
forkinet = _rtserver.forkinet
MAJOR_VERSION = _rtserver.MAJOR_VERSION
MINOR_VERSION = _rtserver.MINOR_VERSION

def operate(*args):
  return _rtserver.operate(*args)
operate = _rtserver.operate

def initialize(*args):
  return _rtserver.initialize(*args)
initialize = _rtserver.initialize

def main(*args):
  return _rtserver.main(*args)
main = _rtserver.main

def getRadarParm():
  return _rtserver.getRadarParm()
getRadarParm = _rtserver.getRadarParm

def getFitData():
  return _rtserver.getFitData()
getFitData = _rtserver.getFitData

def return_rng_xrng(*args):
  return _rtserver.return_rng_xrng(*args)
return_rng_xrng = _rtserver.return_rng_xrng

def return_noise():
  return _rtserver.return_noise()
return_noise = _rtserver.return_noise

def return_elv(*args):
  return _rtserver.return_elv(*args)
return_elv = _rtserver.return_elv

def return_lag(*args):
  return _rtserver.return_lag(*args)
return_lag = _rtserver.return_lag

def return_pulse(*args):
  return _rtserver.return_pulse(*args)
return_pulse = _rtserver.return_pulse

def get_outpipe():
  return _rtserver.get_outpipe()
get_outpipe = _rtserver.get_outpipe
# This file is compatible with both classic and new-style classes.


